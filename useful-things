## Remove a variable that you no longer need
rm(variable)

## Remove columns from df
starwars %>% 
  select(-name) %>%        # the range of columns from 'name' to 'mass'
  select(-(name:mass)) %>%        # the range of columns from 'name' to 'mass'
  select(-contains('color')) %>%  # any column name that contains 'color'
  select(-starts_with('bi')) %>%  # any column name that starts with 'bi'
  select(-ends_with('er')) %>%    # any column name that ends with 'er'
  select(-matches('^f.+s$')) %>%  # any column name matching the regex pattern
  select_if(~!is.list(.)) %>%     # not by column name but by data type
  
  # select and name at the same time
  select(CustomerAccountNumber =`Account Number`, NPSDate = Date)

## Add a column
df$column <- "to-do"
#or
join <- join %>% 
  mutate()

## Text into columns - https://rdrr.io/cran/tidyr/man/separate.html
separate(data, col, into, sep = "[^[:alnum:]]+", remove = TRUE,
  convert = FALSE, extra = "warn", fill = "warn", ...)
  # e.g.
adobe <- separate(df, column, c("ActivityDt", "ActivityHour"), sep = ", Hour", remove = TRUE)

  
## NAs into 0s
df[is.na(df)] <- 0  

## Parsing dates
library(lubridate)
parse_date_time(df$datecolumn, orders = "d%/%m/%Y")    
  # another option but it doesnt always work
as.Date(df$datecolumn, format = "d%/%m/%Y")

#Extract unique elements of a data frame
as.data.frame(unique(df$column))


# Filter contains
newdf <- df %>% 
  filter(grepl('2019', nameOfColumn))

# First occurence for a variable
firstDate <-  df %>% 
  group_by(customeraccountnumber) %>% 
  arrange(date) %>%
  slice(1) %>% # takes the first occurrence if there is a tie
  ungroup()


# Gather
plotdata_abs <- gather(df, key = "key_column", value = "values_column")

plotdata_abs <- gather(df, key = "key_column_title", value = "values_column_title", 2:ncol(df)) #gather columns from 2 till the end
# you tell them what to name the key column and the column for the values and then which columns to pick
#â˜º e.g
accessPoints <- access %>% 
  gather(key = "accessPoints", value = "accessValues", 3:ncol(access))

# Column names
  # Replace the "X" by "W"
names(df) <- gsub(x = names(df), pattern = "\\X", replacement = "W")  


# https://www.datacamp.com/community/tutorials/15-easy-solutions-data-frame-problems-r


## Count if. Counts visits, opens...

df <- df %>% 
  group_by(customerType) %>%
  summarise(visits = sum(visits > 0),
            opens = sum(opens > 0),
            claims = sum(claims > 0),
            lp2claim = claims/visits,
            open2claim = claims/opens
  )  


## Filter out NAs
metadata %>%
  mutate(genome_bp = genome_size *1e6) %>%
  filter(!is.na(clade))
  
  
## Column and row sums
#https://stat.ethz.ch/R-manual/R-devel/library/base/html/colSums.html

## Joining data frames
left_join(df1, df2, by = ("date" = "Dates"))
#If you want to join by 2, best is to change the names
